<?xml version="1.0" encoding="utf-8"?>
<FormatTemplates xmlns="http://www.phoenixcontact.com/schema/clitemplates">
	<FormatTemplate name="ctn">
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Bit" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?(?:Bool|Boolean)" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt8" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int8" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Char8" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Char16" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt16" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int16" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt32" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int32" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt64" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int64" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Float32" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Float64" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?DateTime" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTime" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTime64" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDate" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDate64" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDateTime" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDateTime64" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTimeOfDay" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTimeOfDay64" converted="&quot;&quot;"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?StaticString(.*)" converted="&quot;&quot;"/>
		<TemplateConversion template="CTN&lt;$(fullName)&gt;()"/>
	</FormatTemplate>
  <!--Implicitly used for arpDataType conversion which is programmed-->
  <FormatTemplate name="knownDataTypes">
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Bit" converted="Bit"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?(?:Bool|Boolean)" converted="Boolean"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt8" converted="UInt8"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int8" converted="Int8"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Char8" converted="Char8"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Char16" converted="Char16"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt16" converted="UInt16"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int16" converted="Int16"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt32" converted="UInt32"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int32" converted="Int32"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt64" converted="UInt64"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int64" converted="Int64"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Float32" converted="Float32"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Float64" converted="Float64"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?DateTime" converted="DateTime"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTime" converted="IecTime"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTime64" converted="IecTime64"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDate" converted="IecDate"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDate64" converted="IecDate64"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDateTime" converted="IecDateTime"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDateTime64" converted="IecDateTime64"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTimeOfDay" converted="IecTimeOfDay"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTimeOfDay64" converted="IecTimeOfDay64"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?StaticString(.*)" converted="StaticString"/>
    <RegexConversion pattern="(.*)" converted="unkown($(1))"/>
  </FormatTemplate>
	<FormatTemplate name="dimensions" multiplicity="OneOrMore" seperator=";"/>
	<FormatTemplate name="standardAttributes" multiplicity="OneOrMore" seperator=" | ">
		<Prefix value="StandardAttribute::"/>
	</FormatTemplate>
  <FormatTemplate name="metaAttributes" multiplicity="OneOrMore" seperator="|">
    <RegexConversion ignore-case="true" pattern="None" converted=""/>
  </FormatTemplate>
  <FormatTemplate name="start" target="namespace" multiplicity="OneOrMore" seperator=" { ">
	  <Prefix value="namespace "/>
		<Suffix only-aggregated="true" value="$(newLine){"/>
	  <Split>::</Split>
	  <Split>.</Split>
	</FormatTemplate>
	<FormatTemplate name="end" target="namespace" multiplicity="OneOrMore">
    <RegexConversion converted="}"/>
	  <Split>::</Split>
	  <Split>.</Split>
	</FormatTemplate>
	<FormatTemplate name="directoryName">
		<RegexConversion pattern="^.*?[\/\\](?&lt;directoryName&gt;[^\/\\]*)[\/\\]?\s*$" converted="$(directoryName)"/>
	</FormatTemplate>
	<FormatTemplate name="srcBasePath" target="output">
	  <ConditionalConversion condition="$(isRooted)" template="$(value)"/>
	  <RegexConversion pattern="(.*[\/\\]?(?&lt;=[\/\\]|^)src(?=[\/\\]|$)[\/\\]?.*)" converted="$(1)"/>
	  <TemplateConversion pattern="(?!.*[\/\\]src(?=[\/\\]|$)).*" template="./src/$(value)"/>
	</FormatTemplate>
  <FormatTemplate name="relativePath" target="path" multiplicity="OneOrMore" seperator="">
    <Split>$([if-specified]base-directory)$(base-directory)$([else])$(root.path)$([end-if-specified])</Split>
    <RegexConversion pattern="[\/\\](?&lt;split&gt;.*)?" converted="$(split)"/>
  </FormatTemplate>
  <FormatTemplate name="lastNamespacePart">
    <RegexConversion pattern=".*\.(?&lt;name&gt;.+)" converted="$(name)"/>
  </FormatTemplate>
  <FormatTemplate name="cppFullName" multiplicity="OneOrMore" seperator="::">
    <Split>.</Split>
  </FormatTemplate>
  <FormatTemplate name="startUppercase">
    <RegexConversion pattern="(?&lt;value&gt;.+)" converted="\u$(value)"/>
  </FormatTemplate>
  <FormatTemplate name="convertStaticString">
    <RegexConversion ignore-case="true" pattern="StaticString&lt;80&gt;" converted="StaticString"/>
    <RegexConversion ignore-case="true" pattern="StaticString(?!&lt;80&gt;)&lt;(\d+)&gt;" converted="StaticString$(1)"/>
  </FormatTemplate>
  <FormatTemplate name="escapeXmlNames">
    <TemplateConversion template="$(value.format.escapeLt.format.escapeGt.format.escapeQuote.format.escapeApos.format.escapeAmp)"/>
  </FormatTemplate>
  <FormatTemplate name="escapeLt" multiplicity="OneOrMore" seperator="&amp;lt;">
    <Split>&lt;</Split>
  </FormatTemplate>
  <FormatTemplate name="escapeGt" multiplicity="OneOrMore" seperator="&amp;gt;">
    <Split>&gt;</Split>
  </FormatTemplate>
  <FormatTemplate name="escapeApos" multiplicity="OneOrMore" seperator="&amp;apos;">
    <Split>&apos;</Split>
  </FormatTemplate>
  <FormatTemplate name="escapeQuote" multiplicity="OneOrMore" seperator="&amp;quot;">
    <Split>&quot;</Split>
  </FormatTemplate>
  <FormatTemplate name="escapeAmp" multiplicity="OneOrMore" seperator="&amp;amp;">
    <Split>&amp;</Split>
  </FormatTemplate>
</FormatTemplates>