<?xml version="1.0" encoding="utf-8"?>
<FormatTemplates xmlns="http://www.phoenixcontact.com/schema/clitemplates">
	<FormatTemplate name="ctn">
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Bit" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?(?:Bool|Boolean)" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt8" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int8" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Char8" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Char16" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt16" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int16" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt32" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int32" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt64" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int64" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Float32" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Float64" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?DateTime" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTime" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTime64" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDate" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDate64" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDateTime" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDateTime64" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTimeOfDay" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTimeOfDay64" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?StaticString(.*)" converted="String::Empty"/>
		<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?StaticWString(.*)" converted="String::Empty"/>
		<TemplateConversion template="CTN&lt;$(fullName)&gt;()"/>
	</FormatTemplate>
  <!--Implicitly used for arpDataType conversion which is programmed-->
  <FormatTemplate name="knownDataTypes">
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Bit" converted="Bit"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?(?:Bool|Boolean)" converted="Boolean"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt8" converted="UInt8"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int8" converted="Int8"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Char8" converted="Char8"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Char16" converted="Char16"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt16" converted="UInt16"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int16" converted="Int16"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt32" converted="UInt32"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int32" converted="Int32"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?UInt64" converted="UInt64"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Int64" converted="Int64"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Float32" converted="Float32"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?Float64" converted="Float64"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?DateTime" converted="DateTime"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTime" converted="IecTime"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTime64" converted="IecTime64"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDate" converted="IecDate"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDate64" converted="IecDate64"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDateTime" converted="IecDateTime"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecDateTime64" converted="IecDateTime64"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTimeOfDay" converted="IecTimeOfDay"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?IecTimeOfDay64" converted="IecTimeOfDay64"/>
	<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?StaticString(.*)" converted="StaticString"/>
	<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?StaticWString(.*)" converted="StaticWString"/>
    <RegexConversion pattern="(.*)" converted="unkown($(1))"/>
  </FormatTemplate>
  <FormatTemplate name="iecDataType">
	<RegexConversion ignore-case="true" pattern="Boolean" converted="BOOL"/>
	<RegexConversion ignore-case="true" pattern="UInt8" converted="USINT"/>
	<RegexConversion ignore-case="true" pattern="Int8" converted="SINT"/>
	<RegexConversion ignore-case="true" pattern="UInt16" converted="UINT"/>
	<RegexConversion ignore-case="true" pattern="Int16" converted="INT"/>
	<RegexConversion ignore-case="true" pattern="UInt32" converted="UDINT"/>
	<RegexConversion ignore-case="true" pattern="Int32" converted="DINT"/>
	<RegexConversion ignore-case="true" pattern="UInt64" converted="ULINT"/>
	<RegexConversion ignore-case="true" pattern="Int64" converted="LINT"/>
	<RegexConversion ignore-case="true" pattern="Float32" converted="REAL"/>
	<RegexConversion ignore-case="true" pattern="Float64" converted="LREAL"/>
	<RegexConversion ignore-case="true" pattern="StaticString" converted="STRING"/>
	<RegexConversion ignore-case="true" pattern="StaticWString" converted="WSTRING"/>
	<RegexConversion ignore-case="true" pattern="IecTime" converted="TIME"/>
	<RegexConversion ignore-case="true" pattern="IecTime64" converted="LTIME"/>
	<RegexConversion ignore-case="true" pattern="IecDate64" converted="LDATE"/>
	<RegexConversion ignore-case="true" pattern="IecDateTime64" converted="LDATE_AND_TIME"/>
	<RegexConversion ignore-case="true" pattern="IecTimeOfDay64" converted="LTIME_OF_DAY"/>
	<RegexConversion ignore-case="true" pattern="Bit" converted="BOOL"/>
	<RegexConversion pattern="(.*)" converted="unknown($(1))"/>
	<!--
	<RegexConversion ignore-case="true" pattern="DateTime" converted=""/>
	<RegexConversion ignore-case="true" pattern="IecDate" converted=""/>
	<RegexConversion ignore-case="true" pattern="IecDateTime" converted=""/>
	<RegexConversion ignore-case="true" pattern="IecTimeOfDay" converted=""/>
	-->
  </FormatTemplate>
  <FormatTemplate name="iecStringDataType">
	<RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?StaticString&lt;(80)?&gt;" converted="STRING"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?StaticString(?!&lt;80&gt;)&lt;(\d+)&gt;" converted="STRING[$(1)]"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?StaticWString&lt;(80)?&gt;" converted="WSTRING"/>
    <RegexConversion ignore-case="true" pattern="(?:(?:::)?Arp\S*::)?StaticWString(?!&lt;80&gt;)&lt;(\d+)&gt;" converted="WSTRING[$(1)]"/>
  </FormatTemplate>
  <FormatTemplate name="dimensions" multiplicity="OneOrMore" seperator=";"/>
  <FormatTemplate name="metaDimensions">
    <TemplateConversion template="$(value.format.metaDimensionsSplitter.format.removeBracesFromSingle)"/>
  </FormatTemplate>
  <FormatTemplate name="metaDimensionsSplitter" multiplicity="OneOrMore" seperator=",">
    <Split>,</Split>
	<Prefix value="{"/>
	<Suffix value="}"/>
  </FormatTemplate>
  <FormatTemplate name="removeBracesFromSingle">
    <RegexConversion pattern="{(\d+)}" converted="$(1)"/>
    <RegexConversion pattern="{}" converted=""/>
    <RegexConversion pattern="(.*)" converted="$(1)"/>
  </FormatTemplate>
  <FormatTemplate name="standardAttributes" multiplicity="OneOrMore" seperator=" | ">
	<Prefix value="StandardAttribute::"/>
  </FormatTemplate>
  <FormatTemplate name="metaAttributes" multiplicity="OneOrMore" seperator="|">
    <RegexConversion ignore-case="true" pattern="None" converted=""/>
  </FormatTemplate>
  <FormatTemplate name="start" target="namespace" multiplicity="OneOrMore" seperator=" { ">
	<Prefix value="namespace "/>
	<Suffix only-aggregated="true" value="$(newLine){"/>
	<Split>::</Split>
	<Split>.</Split>
  </FormatTemplate>
  <FormatTemplate name="end" target="namespace" multiplicity="OneOrMore">
    <RegexConversion converted="}"/>
	<Split>::</Split>
	<Split>.</Split>
	</FormatTemplate>
  <FormatTemplate name="directoryName">
	<RegexConversion pattern="^.*?[\/\\](?&lt;directoryName&gt;[^\/\\]*)[\/\\]?\s*$" converted="$(directoryName)"/>
  </FormatTemplate>
  <FormatTemplate name="srcBasePath" target="output">
	<ConditionalConversion condition="$(isRooted)" template="$(value)"/>
	<RegexConversion pattern="(.*[\/\\]?(?&lt;=[\/\\]|^)src(?=[\/\\]|$)[\/\\]?.*)" converted="$(1)"/>
	<TemplateConversion pattern="(?!.*[\/\\]src(?=[\/\\]|$)).*" template="./src/$(value)"/>
  </FormatTemplate>
  <FormatTemplate name="relativePath" target="path" multiplicity="OneOrMore" seperator="">
    <Split>$([if-specified]base-directory)$(base-directory)$([else])$(root.path)$([end-if-specified])</Split>
    <RegexConversion pattern="[\/\\](?&lt;split&gt;.*)?" converted="$(split)"/>
  </FormatTemplate>
  <FormatTemplate name="lastNamespacePart">
    <RegexConversion pattern=".*\.(?&lt;name&gt;.+)" converted="$(name)"/>
  </FormatTemplate>
  <FormatTemplate name="cppFullName" multiplicity="OneOrMore" seperator="::">
    <Split>.</Split>
  </FormatTemplate>
  <FormatTemplate name="datatypeNamespace" multiplicity="OneOrMore" seperator=".">
    <Split>::</Split>
  </FormatTemplate>
  <FormatTemplate name="startUppercase">
    <RegexConversion pattern="(?&lt;value&gt;.+)" converted="$(u:value)"/>
  </FormatTemplate>
  <FormatTemplate name="convertIecString">
    <RegexConversion ignore-case="true" pattern="StaticString(?!&lt;80&gt;)&lt;(\d+)&gt;" converted="String$(1)"/>
    <RegexConversion ignore-case="true" pattern="StaticWString(?!&lt;80&gt;)&lt;(\d+)&gt;" converted="WString$(1)"/>
  </FormatTemplate>
  <FormatTemplate name="convertStaticString">
    <RegexConversion ignore-case="true" pattern="StaticString&lt;(80)?&gt;" converted="StaticString"/>
    <RegexConversion ignore-case="true" pattern="StaticString(?!&lt;80&gt;)&lt;(.+)&gt;" converted="StaticString$(1)"/>
	<RegexConversion ignore-case="true" pattern="StaticWString&lt;(80)?&gt;" converted="StaticWString"/>
    <RegexConversion ignore-case="true" pattern="StaticWString(?!&lt;80&gt;)&lt;(.+)&gt;" converted="StaticWString$(1)"/>
  </FormatTemplate>
  <FormatTemplate name="escapeXmlNames">
    <TemplateConversion template="$(value.format.escapeAmp.format.escapeLt.format.escapeGt.format.escapeQuote.format.escapeApos)"/>
  </FormatTemplate>
  <FormatTemplate name="escapeLt" multiplicity="OneOrMore" seperator="&amp;lt;">
    <Split>&lt;</Split>
  </FormatTemplate>
  <FormatTemplate name="escapeGt" multiplicity="OneOrMore" seperator="&amp;gt;">
    <Split>&gt;</Split>
  </FormatTemplate>
  <FormatTemplate name="escapeApos" multiplicity="OneOrMore" seperator="&amp;apos;">
    <Split>&apos;</Split>
  </FormatTemplate>
  <FormatTemplate name="escapeQuote" multiplicity="OneOrMore" seperator="&amp;quot;">
    <Split>&quot;</Split>
  </FormatTemplate>
  <FormatTemplate name="escapeAmp" multiplicity="OneOrMore" seperator="&amp;amp;">
    <Split>&amp;</Split>
  </FormatTemplate>
  <FormatTemplate name="escapeTypeName" multiplicity="OneOrMore" seperator="_">
    <Split>::</Split>
    <Split>&lt;</Split>
    <Split>&gt;</Split>
    <Split>,</Split>
    <Split>_</Split>
  </FormatTemplate>
  <FormatTemplate name="escapeWithUnderscore" multiplicity="OneOrMore" seperator="_">
    <Split>.</Split>
  </FormatTemplate>
  <FormatTemplate name="trim" multiplicity="OneOrMore" seperator="">
    <Split> </Split>
  </FormatTemplate>
  <FormatTemplate name="escapeTypenameForOffset">
    <ConditionalConversion condition="$(containsltgt)" template="offsetof_$(value.format.escapeTypeName.format.trim)"/>
  </FormatTemplate>
  <FormatTemplate name="listNamesAndValues" multiplicity="OneOrMore" seperator=", ">
	<TemplateConversion template="$(name)$([if-specified]value) := $(value)$([end-if-specified])"/>
  </FormatTemplate>
  <FormatTemplate name="checkForArray">
    <ConditionalConversion condition="$(isArray)" template="$(name)Array"/>
  </FormatTemplate>
  <FormatTemplate name="checkForArray_v2">
    <ConditionalConversion condition="$(isArray)" template="ARRAY_$([if]$(origin.generate-namespaces))$(iecdatatypenamespace.format.datatypeNamespace.format.escapeTypeName.format.escapeWithUnderscore)$([end-if])$(format.iecDataTypeFormat)_$(multiplicity.format.multiplicityConstantReplace.throwIfMultidimensional.format.listMultiplicity_v2)"/>
  </FormatTemplate>
  <FormatTemplate name="listMultiplicity" multiplicity="OneOrMore" seperator=", ">
	  <TemplateConversion template="0..$(decrement)"/>
  </FormatTemplate>
  <FormatTemplate name="listMultiplicity_v2" multiplicity="OneOrMore" seperator=", ">
    <TemplateConversion template="0_$(decrement)"/>
  </FormatTemplate>
  <FormatTemplate name="escapeTemplatedStructName">
    <TemplateConversion template="$(format.trim.format.escapeTypeName.format.noDuplicateUnderscore.format.removeTrailingUnderscore)"/>
  </FormatTemplate>
  <FormatTemplate name="noDuplicateUnderscore" multiplicity="OneOrMore" seperator="_">
    <Split>__</Split>
  </FormatTemplate>
  <FormatTemplate name="removeTrailingUnderscore" >
    <RegexConversion pattern="(.+[^_])_*" converted="$(1)"/>
  </FormatTemplate>
  <FormatTemplate name="$">
    <RegexConversion pattern=".*" converted="$" />
  </FormatTemplate>
</FormatTemplates>